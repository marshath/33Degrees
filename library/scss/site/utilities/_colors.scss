/*
 *
 * COLOR MIXINS
 *
 * Variables: site-colors, alert-colors, social-colors, color-opacity
 * Functions: site-color, alert-color, social-color, color-alpha, site-color-lighten, site-color-darken, site-color-alpha, alert-color-lighten, alert-color-darken, alert-color-alpha
 */


/*******************************
COLOR -- MIXING FUNCTIONS
*******************************/
// For more information on these color mixins, visit https://scotch.io/tutorials/aesthetic-sass-2-colors
// Set incremental tint value
$color-interval: 10% !global;

// BRAND COLORS -- Function to call the specfic site color using
@function brand-color($site-key: 'primary') { 									// brand-color('primary')
	@return map-get($brand-colors, $site-key);
}
// Lighten function
@function brand-color-lighten($site-color-name: 'primary', $site-level: 0) {	// brand-color-lighten('primary',2)
	$site-color: brand-color($site-color-name);
	$site-color-base: white;
	@return mix($site-color-base, $site-color, $site-level * $color-interval);
}
// Darken function
@function brand-color-darken($site-color-name: 'primary', $site-level: 0) {		// brand-color-darken('primary',2)
	$site-color: brand-color($site-color-name);
	$site-color-base: black;
	@return mix($site-color-base, $site-color, $site-level * $color-interval);
}
// Alpha function
@function brand-color-alpha($name: 'primary', $opacity: 0) {					// brand-color-alpha('primary', 'light')
	$color: brand-color($name);
	@if map-key-exists( color-alpha(), $opacity) { 										// Get the named opacity level, if it exists
		$opacity: map-get($color-opacity, $opacity);
	}
	@return rgba($color, $opacity); 													// Use rgba() to manipulate the color's alpha level
}

// ALERT COLORS -- Function to call the specfic alert color using
@function alert-color($alert-key: 'good') { 									// alert-color('good')
	@return map-get($alert-colors, $alert-key);
}
// Lighten function
@function alert-color-lighten($alert-color-name: 'good', $alert-level: 0) {		// alert-color-lighten('good',2)
	$alert-color: alert-color($alert-color-name);
	$alert-color-base: white;
	@return mix($alert-color-base, $alert-color, $alert-level * $color-interval);
}
// Darken function
@function alert-color-darken($alert-color-name: 'good', $alert-level: 0) {		// alert-color-darken('good',2)
	$alert-color: alert-color($alert-color-name);
	$alert-color-base: black;
	@return mix($alert-color-base, $alert-color, $alert-level * $color-interval);
}
// Alpha function
@function alert-color-alpha($name: 'good', $opacity: 0) {						// alert-color-alpha('good', 'light')
	$color: alert-color($name);
	@if map-key-exists( color-alpha(), $opacity) { 										// Get the named opacity level, if it exists
		$opacity: map-get($color-opacity, $opacity);
	}
	@return rgba($color, $opacity); 													// Use rgba() to manipulate the color's alpha level
}

// SOCIAL MEDIA -- Function to call the specfic social media color using
@function social-color($social-key: 'facebook') {								// social-colors('facebook')
	@return map-get($social-colors, $social-key);
}

// ALPHA OPACITY -- Function to call the specfic color-opacity
@function color-alpha($alpha-key: 'light') {									// color-alpha('light')
	@return map-get($color-opacity, $alpha-key);
}
